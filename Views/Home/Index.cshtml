@{
    ViewData["Title"] = "Home Page";

    var data = (string)ViewData["message"];
}

<head>
    <script type="text/javascript" src="https://code.jquery.com/jquery.min.js"></script>
    <script src="https://markjivko.com/dist/recorder.js"></script>

    <style type="text/css">

            [data-role="controls"] > button {
                margin: 50px ;
                outline: none;
                display: block;
                border: none;
                background-color: #D9AFD9;
                background-image: -webkit-gradient(linear, left bottom, left top, from(#D9AFD9), to(#97D9E1));
                background-image: -o-linear-gradient(bottom, #D9AFD9 0%, #97D9E1 100%);
                background-image: linear-gradient(0deg, #D9AFD9 0%, #97D9E1 100%);
                width: 100px;
                height: 100px;
                border-radius: 50%;
                text-indent: -1000em;
                cursor: pointer;
                -webkit-box-shadow: 0px 5px 5px 2px rgba(0,0,0,0.3) inset, 0px 0px 0px 30px #fff, 0px 0px 0px 35px #333;
                box-shadow: 0px 5px 5px 2px rgba(0,0,0,0.3) inset, 0px 0px 0px 30px #fff, 0px 0px 0px 35px #333;
            }

                [data-role="controls"] > button:hover {
                    background-color: #ee7bee;
                    background-image: -webkit-gradient(linear, left bottom, left top, from(#ee7bee), to(#6fe1f5));
                    background-image: -o-linear-gradient(bottom, #ee7bee 0%, #6fe1f5 100%);
                    background-image: linear-gradient(0deg, #ee7bee 0%, #6fe1f5 100%);
                }

                [data-role="controls"] > button[data-recording="true"] {
                    background-color: #ff2038;
                    background-image: -webkit-gradient(linear, left bottom, left top, from(#ff2038), to(#b30003));
                    background-image: -o-linear-gradient(bottom, #ff2038 0%, #b30003 100%);
                    background-image: linear-gradient(0deg, #ff2038 0%, #b30003 100%);
                }

            [data-role="recordings"] > .row {
                width: auto;
                height: auto;
                padding: 20px;
            }

                [data-role="recordings"] > .row > audio {
                    outline: none;
                }

                [data-role="recordings"] > .row > a {
                    display: inline-block;
                    text-align: center;
                    font-size: 20px;
                    line-height: 50px;
                    vertical-align: middle;
                    width: 50px;
                    height: 50px;
                    border-radius: 20px;
                    color: #fff;
                    font-weight: bold;
                    text-decoration: underline;
                    background-color: #0093E9;
                    background-image: -webkit-gradient(linear, left bottom, left top, from(#0093E9), to(#80D0C7));
                    background-image: -o-linear-gradient(bottom, #0093E9 0%, #80D0C7 100%);
                    background-image: linear-gradient(0deg, #0093E9 0%, #80D0C7 100%);
                    float: right;
                    margin-left: 20px;
                    cursor: pointer;
                }

                    [data-role="recordings"] > .row > a:hover {
                        text-decoration: none;
                    }

                    [data-role="recordings"] > .row > a:active {
                        background-image: -webkit-gradient(linear, left top, left bottom, from(#0093E9), to(#80D0C7));
                        background-image: -o-linear-gradient(top, #0093E9 0%, #80D0C7 100%);
                        background-image: linear-gradient(180deg, #0093E9 0%, #80D0C7 100%);
                    }
        </style>

</head>

<h3 style="color:red">@data</h3>
<div class="text-center ">
    <h1 class="display-4">Login</h1>
</div>
<div class="row d-flex justify-content-center flex-nowrap" id="video_element">
    <video autoplay width="480" height="360" id="videoCapture"></video>
    <img style="vertical-align:top" id="imgCapture" width="480" height="360" />


</div>
<br />
<br />


<div class="row d-flex justify-content-center flex-nowrap" id="holder">
    <div data-role="controls">
        <button>Record</button>
    </div>
    <div data-role="recordings">
    </div>
    
</div>


<div class="row d-flex justify-content-center flex-nowrap">

    @using (Html.BeginForm("Dashboard", "Home", FormMethod.Post, new { id = "myform" }))
    {
        <input type="hidden" name="base64_input_image" id="base64_input_image">
        <input type="hidden" name="base64_input_audio" id="base64_input_audio">
        <button type="button" id="login_btn">Login</button>
    }


</div>

<div class="row d-flex justify-content-center flex-nowrap">
    <a asp-area="" asp-controller="Register" asp-action="Index">Not a member? Register now</a>
</div>



<script>
    const video = document.querySelector('video')
    navigator.mediaDevices.getUserMedia({
        video: true
    }).then(stream => video.srcObject = stream);

    var image_element = document.getElementById("imgCapture");
    var video_element = document.getElementById("videoCapture");
    image_element.style.display = "none";

    const canvas = document.createElement('canvas');
    const img = document.querySelector('img');

</script>

<script>
    document.getElementById('login_btn').onclick = function () {
        if (video_element.style.display === "none") {
            image_element.style.display = "none";
            video_element.style.display = "block";

            const video = document.querySelector('video')
            navigator.mediaDevices.getUserMedia({
                video: true
            }).then(stream => video.srcObject = stream);

        } else {
            video_element.style.display = "none";
            image_element.style.display = "block";

            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);
            video.srcObject.getTracks().forEach(track => track.stop());
            // Other browsers will fall back to image/png
            $("#imgCapture").css("visibility", "visible");
            $("#imgCapture").attr("src", canvas.toDataURL('image/png'));
        }
        var dataUrl = canvas.toDataURL('image/png');
        document.getElementById('base64_input_image').value = dataUrl;
        document.getElementById("myform").submit();
    }
</script>


<script>
    jQuery(document).ready(function () {
        var $ = jQuery;
        var myRecorder = {
            objects: {
                context: null,
                stream: null,
                recorder: null
            },
            init: function () {
                if (null === myRecorder.objects.context) {
                    myRecorder.objects.context = new (
                        window.AudioContext || window.webkitAudioContext
                    );
                }
            },
            start: function () {
                var options = { audio: true, video: false };
                navigator.mediaDevices.getUserMedia(options).then(function (stream) {
                    myRecorder.objects.stream = stream;
                    myRecorder.objects.recorder = new Recorder(
                        myRecorder.objects.context.createMediaStreamSource(stream),
                        { numChannels: 1}
                    );
                    myRecorder.objects.recorder.record();
                }).catch(function (err) { });
            },
            stop: function (listObject) {
                if (null !== myRecorder.objects.stream) {
                    myRecorder.objects.stream.getAudioTracks()[0].stop();
                }
                if (null !== myRecorder.objects.recorder) {
                    myRecorder.objects.recorder.stop();

                    // Validate object
                    if (null !== listObject
                        && 'object' === typeof listObject
                        && listObject.length > 0) {
                        // Export the WAV file
                        myRecorder.objects.recorder.exportWAV(function (blob) {
                            var url = (window.URL || window.webkitURL)
                                .createObjectURL(blob)

                            var reader = new FileReader();
                            reader.readAsDataURL(blob);
                            reader.onloadend = function () {
                                var base64data = reader.result;
                                console.log(base64data);
                                document.getElementById('base64_input_audio').value = base64data;
                            }

                            console.log(url)
                            


                            // Prepare the playback
                            var audioObject = $('<audio controls id="audioCapture"></audio>')
                                .attr('src', url);

                            // Prepare the download link
                            var downloadObject = $('<a>&#9660;</a>')
                                .attr('href', url)
                                .attr('download', 'login.wav');

                            // Wrap everything in a row
                            var holderObject = $('<div class="row"></div>')
                                .append(audioObject)
                                .append(downloadObject);

                            // Append to the list
                            listObject.append(holderObject);
                        });
                    }
                }
            }
        };

        // Prepare the recordings list
        var listObject = $('[data-role="recordings"]');

        // Prepare the record button
        $('[data-role="controls"] > button').click(function () {
            // Initialize the recorder
            myRecorder.init();

            // Get the button state
            var buttonState = !!$(this).attr('data-recording');

            // Toggle
            if (!buttonState) {
                $(this).attr('data-recording', 'true');
                myRecorder.start();
            } else {
                $(this).attr('data-recording', '');
                myRecorder.stop(listObject);
            }
        });
    });
</script>








